#!/usr/bin/env groovy


node {
	def mvnHome, mvn, scannerHome

	def pom, releaseVersion, isSnapshot

	def groupId = "no.nav.maskinelle-trekk"
	def application = "trekk"
	def naisConfig = "nais.yaml"
	def mockSuffix = "T"
	def dockerRepo = "docker.adeo.no:5000/okonomi"

	try {

		stage('initialize') {
			mvnHome = tool 'Maven'
			mvn = "${mvnHome}/bin/mvn"
			scannerHome = tool 'SonarQube'
			pom = readMavenPom file: 'pom.xml'
			releaseVersion = pom.version.tokenize("-")[0]
			isSnapshot = pom.version.contains("-SNAPSHOT")
		}

		stage("Checkout") {
			checkout scm
		}

		stage('Build') {
			print "Building project"
			sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
			sh "${mvn} clean package -U"
		}

		stage('Package') {
			if (isSnapshot) {
				sh "docker build --build-arg --build-arg SPRING_PROFILES_ACTIVE=mock -t ${dockerRepo}/${application}:${releaseVersion}-${mockSuffix} --rm=true ."
				sh "docker build --build-arg -t ${dockerRepo}/${application}:${releaseVersion} --rm=true ."

//				sh "git commit -am \"Set version to ${releaseVersion} (from Jenkins pipeline)\""
//				sh "git push origin ${branch}"
//				sh "git tag -a ${application}-${releaseVersion} -m ${application}-${releaseVersion}"
//				sh "git push --tags"
			} else {
				println("[INFO] POM version is not a SNAPSHOT, it is ${pom.version}. Skipping releasing")
			}
		}

		stage("Publish Docker image") {
			if (isSnapshot) {
//				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'nexus-user', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD']]) {
//					sh "curl -s -F r=m2internal -F hasPom=false -F e=yaml -F g=${groupId} -F a=${application} -F " + "v=${releaseVersion}-${mockSuffix} -F p=yaml -F file=@${naisConfig} -u ${env.NEXUS_USERNAME}:${env.NEXUS_PASSWORD} http://maven.adeo.no/nexus/service/local/artifact/maven/content"
//					sh "curl -s -F r=m2internal -F hasPom=false -F e=yaml -F g=${groupId} -F a=${application} -F " + "v=${releaseVersion} -F p=yaml -F file=@${naisConfig} -u ${env.NEXUS_USERNAME}:${env.NEXUS_PASSWORD} http://maven.adeo.no/nexus/service/local/artifact/maven/content"
//				}
//				sh "docker push ${dockerRepo}/${application}:${releaseVersion}-${mockSuffix}"
//				sh "docker push ${dockerRepo}/${application}:${releaseVersion}"
			} else {
				println("[INFO] POM version is not a SNAPSHOT, it is ${pom.version}. Skipping publishing!")
			}
		}

		stage('Deploy nais.yaml to nexus m2internal') {
			if (isSnapshot) {
//				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'nexus-user', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD']]) {
//					sh "nais upload -f ${naisConfig} -a ${application} -v ${releaseVersion}-${mockSuffix} -u ${NEXUS_USERNAME} -p ${NEXUS_PASSWORD}"
//					sh "nais upload -f ${naisConfig} -a ${application} -v ${releaseVersion} -u ${NEXUS_USERNAME} -p ${NEXUS_PASSWORD}"
//				}
			} else {
				println("[INFO] POM version is not a SNAPSHOT, it is ${pom.version}. Skipping deploy of nais.yaml to nexus!")
			}
		}
	} finally {
		stage("finally: set new DEV-version") {
			def versionItems = releaseVersion.tokenize('.')
			nextVersion = versionItems.getAt(0) + "." + versionItems.getAt(1)
			nextVersion += "." + (versionItems.getAt(-1).toInteger() + 1)
			nextVersion += "-SNAPSHOT"
			println("[INFO] releaseVersion: ${releaseVersion} / nextVersion: ${nextVersion}")
			sh "${mvn} versions:set -B -DnewVersion=${nextVersion} -DgenerateBackupPoms=false"
//			sh "git commit -am \"Updated version to ${nextVersion}\""
//			sh "git push origin ${branch}"
		}
	}
}