#!/usr/bin/env groovy


node {
    def mvnHome, mvn, scannerHome

    def pom, releaseVersion, isSnapshot

    def groupId = "no.nav.maskinelle-trekk"
    def application = "trekk"
    def naisConfig = "nais.yaml"
    def mockSuffix = "T"
    def dockerRepo = "repo.adeo.no:5443"
    def project = "okonomi"

    try {

        stage('Initialize') {
            mvnHome = tool 'Maven'
            mvn = "${mvnHome}/bin/mvn"
            scannerHome = tool 'SonarQube'
        }

        stage("Checkout") {
            checkout scm
            pom = readMavenPom file: 'pom.xml'
            releaseVersion = pom.version.tokenize("-")[0]
            isSnapshot = pom.version.contains("-SNAPSHOT")
        }

        stage('Build') {
            print "Building project"
            sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
            sh "${mvn} clean package -U -DskipTests"
        }

        stage('Test') {
            sh "${mvn} test"
            junit "trekk-app/target/surefire-reports/*.xml"
        }

        stage('Package') {
            if (isSnapshot) {
                sh "docker build --build-arg SPRING_PROFILES_ACTIVE=mock -t ${dockerRepo}/${project}/${application}:${releaseVersion}-${mockSuffix} --rm=true ."
                sh "docker build --build-arg SPRING_PROFILES_ACTIVE=prod -t ${dockerRepo}/${project}/${application}:${releaseVersion} --rm=true ."

                sh "git commit -am \"Set version to ${releaseVersion} (from Jenkins pipeline)\""
                sh "git push origin ${BRANCH}"
                sh "git tag -a ${application}-${releaseVersion} -m ${application}-${releaseVersion}"
                sh "git push --tags"
            } else {
                println("[INFO] POM version is not a SNAPSHOT, it is ${pom.version}. Skipping releasing")
            }
        }

        stage("Publish Docker images") {
            if (isSnapshot) {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    sh "docker login -u ${env.USERNAME} -p ${env.PASSWORD} ${dockerRepo} && docker push ${dockerRepo}/${project}/${application}:${releaseVersion} && docker push ${dockerRepo}/${project}/${application}:${releaseVersion}-${mockSuffix}"
                }
            } else {
                println("[INFO] POM version is not a SNAPSHOT, it is ${pom.version}. Skipping publishing!")
            }
        }
        stage("Sonar") {
            withSonarQubeEnv('Default') {
                def jacocoVersion = "0.8.1"
                def sonarVersion = "3.4.1.1168"
                sh "${mvn} org.jacoco:jacoco-maven-plugin:${jacocoVersion}:prepare-agent" +
                        " clean verify" +
                        " org.sonarsource.scanner.maven:sonar-maven-plugin:${sonarVersion}:sonar" +
                        " -Djacoco.destFile='${env.WORKSPACE}/target/jacoco.exec'" +
                        " -Dsonar.host.url=${env.SONAR_HOST_URL}" +
                        " -Dsonar.login=${env.SONAR_AUTH_TOKEN}" +
                        " -Dsonar.jacoco.reportPath='${env.WORKSPACE}/target/jacoco.exec'" +
                        " -Dsonar.java.source=1.8" +
                        " -Dsonar.branch=${BRANCH}" +
                        " -Dsonar.coverage.exclusions=**/*Config.java,**/*Exception.java,**/*Entity.java,**/*Alias.java"
            }
        }
    } finally {
        stage("Bump snapshot-version") {
            def versionItems = releaseVersion.tokenize('.')
            nextVersion = versionItems.getAt(0) + "." + versionItems.getAt(1)
            nextVersion += "." + (versionItems.getAt(-1).toInteger() + 1)
            nextVersion += "-SNAPSHOT"
            println("[INFO] releaseVersion: ${releaseVersion} / nextVersion: ${nextVersion}")
            sh "${mvn} versions:set -B -DnewVersion=${nextVersion} -DgenerateBackupPoms=false"
            sh "git commit -am \"Updated version to ${nextVersion}\""
            sh "git push origin ${BRANCH}"
        }
    }
}